<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown测试</title>
    <url>/posts/6/</url>
    <content><![CDATA[<p>做一个Markdown页面渲染测试</p>
<span id="more"></span>
<h1 id="huan-ying-shi-yong-code-arya-code-zai-xian-markdown-bian-ji-qi">欢迎使用 <code>Arya</code> 在线 Markdown 编辑器</h1>
<p><a href="https://markdown.lovejade.cn/?utm_source=markdown.lovejade.cn">Arya</a>，是一款基于 <code>Vue</code>、<code>Vditor</code>，为未来而构建的在线 Markdown 编辑器；轻量且强大：内置粘贴 HTML 自动转换为 Markdown，支持流程图、甘特图、时序图、任务列表，可导出携带样式的图片、PDF、微信公众号特制的 HTML 等等。</p>
<hr>
<h2 id="如何使用">如何使用</h2>
<p><strong>微注</strong>：清空目前这份默认文档，即处于可使用态。<a href="https://markdown.lovejade.cn/?utm_source=markdown.lovejade.cn">Arya</a> 另一大优点在于：编辑内容只会在您本地进行保存，不会上传您的数据至服务器，<strong>绝不窥测用户个人隐私，可放心使用</strong>；Github 源码：<a href="https://github.com/nicejade/markdown-online-editor">markdown-online-editor</a>，部分功能仍在开发🚧，敬请期待。</p>
<p>默认为<a href="https://hacpai.com/article/1577370404903?utm_source=github.com">所见即所得</a>模式，可通过 <code>⌘-⇧-M</code>（<code>Ctrl-⇧-M</code>）进行切换；或通过以下方式：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>所见即所得：<code>⌘-⌥-7</code>（<code>Ctrl-alt-7</code>）；</p>
</li>
<li class="lvl-2">
<p>即时渲染：<code>⌘-⌥-8</code>（<code>Ctrl-alt-8</code>）；</p>
</li>
<li class="lvl-2">
<p>分屏渲染：<code>⌘-⌥-9</code>（<code>Ctrl-alt-9</code>）；</p>
</li>
</ul>
<h3 id="PPT-预览">PPT 预览</h3>
<p>如果您用作 <code>PPT</code> 预览（入口在 <code>设置</code>中），需要注意，这里暂还不能支持各种图表的渲染；您可以使用 <code>---</code> 来定义水平方向上幻灯片，用 <code>--</code> 来定义垂直幻灯片；更多设定可以参见 <a href="https://github.com/hakimel/reveal.js#table-of-contents">RevealJs 文档</a>。</p>
<hr>
<h2 id="什么是-Markdown">什么是 Markdown</h2>
<p><a href="https://nicelinks.site/tags/Markdown/?utm_source=markdown.lovejade.cn">Markdown</a> 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号，以最小的输入代价，生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong>、<em>斜体</em> 或者<a href="https://vue-cli3.lovejade.cn/explore/">超文本链接</a>，更棒的是，它还可以：</p>
<hr>
<h3 id="1-制作待办事宜-Todo-列表">1. 制作待办事宜 <code>Todo</code> 列表</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><input type="checkbox" id="checkbox0" checked="true"><label for="checkbox0">🎉 通常</label><code>Markdown</code> 解析器自带的基本功能；</p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox1" checked="true"><label for="checkbox1">🍀 支持</label><strong>流程图</strong>、<strong>甘特图</strong>、<strong>时序图</strong>、<strong>任务列表</strong>；</p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox2" checked="true"><label for="checkbox2">🏁 支持粘贴 HTML 自动转换为 Markdown；</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox3" checked="true"><label for="checkbox3">💃🏻 支持插入原生 Emoji、设置常用表情列表；</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox4" checked="true"><label for="checkbox4">🚑 支持编辑内容保存</label><strong>本地存储</strong>，防止意外丢失；</p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox5" checked="true"><label for="checkbox5">📝 支持</label><strong>实时预览</strong>，主窗口大小拖拽，字符计数；</p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox6" checked="true"><label for="checkbox6">🛠 支持常用快捷键(</label><strong>Tab</strong>)，及代码块添加复制</p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox7" checked="true"><label for="checkbox7">✨ 支持</label><strong>导出</strong>携带样式的 PDF、PNG、JPEG 等；</p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox8" checked="true"><label for="checkbox8">✨ 升级 Vditor，新增对</label><code>echarts</code> 图表的支持；</p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox9" checked="true"><label for="checkbox9">👏 支持检查并格式化 Markdown 语法，使其专业；</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox10" checked="true"><label for="checkbox10">🦑 支持五线谱、及</label><a href="https://github.com/b3log/vditor/issues/117?utm_source=hacpai.com#issuecomment-526986052">部分站点、视频、音频解析</a>；</p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox11" checked="true"><label for="checkbox11">🌟 增加对</label><strong>所见即所得</strong>编辑模式的支持(<code>⌘-⇧-M</code>)；</p>
</li>
</ul>
<hr>
<h3 id="2-书写一个质能守恒公式-LaTeX">2. 书写一个质能守恒公式[^LaTeX]</h3>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.699ex" height="2.185ex" role="img" focusable="false" viewBox="0 -883.9 3845.1 965.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(1041.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2097.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msup" transform="translate(2975.6,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></p>
<hr>
<h3 id="3-高亮一段代码-code">3. 高亮一段代码[^code]</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给页面里所有的 DOM 元素添加一个 1px 的描边（outline）;</span></span><br><span class="line">[].<span class="property">forEach</span>.<span class="title function_">call</span>($$(<span class="string">"*"</span>),<span class="keyword">function</span>(<span class="params">a</span>){</span><br><span class="line">  a.<span class="property">style</span>.<span class="property">outline</span>=<span class="string">"1px solid #"</span>+(~~(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(<span class="number">1</span>&lt;&lt;<span class="number">24</span>))).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">})</span><br></pre></td></tr></table></figure>
<h3 id="4-高效绘制流程图">4. 高效绘制<a href="https://github.com/knsv/mermaid#flowchart">流程图</a></h3>
<pre class="mermaid">graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;</pre>
<h3 id="5-高效绘制序列图">5. 高效绘制<a href="https://github.com/knsv/mermaid#sequence-diagram">序列图</a></h3>
<pre class="mermaid">sequenceDiagram
    participant Alice
    participant Bob
    Alice-&gt;John: Hello John, how are you?
    loop Healthcheck
        John-&gt;John: Fight against hypochondria
    end
    Note right of John: Rational thoughts <br>prevail...
    John--&gt;Alice: Great!
    John-&gt;Bob: How about you?
    Bob--&gt;John: Jolly good!</pre>
<h3 id="6-高效绘制甘特图">6. 高效绘制<a href="https://github.com/knsv/mermaid#gantt-diagram">甘特图</a></h3>
<blockquote>
<p><strong>甘特图</strong>内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p>
</blockquote>
<pre class="mermaid">gantt
    title 项目开发流程
    section 项目确定
        需求分析       :a1, 2019-06-22, 3d
        可行性报告     :after a1, 5d
        概念验证       : 5d
    section 项目实施
        概要设计      :2019-07-05  , 5d
        详细设计      :2019-07-08, 10d
        编码          :2019-07-15, 10d
        测试          :2019-07-22, 5d
    section 发布验收
        发布: 2d
        验收: 3d</pre>
<h3 id="8-绘制表格">8. 绘制表格</h3>
<table>
<thead>
<tr>
<th style="text-align:left">作品名称</th>
<th style="text-align:left">在线地址</th>
<th style="text-align:center">上线日期</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">倾城之链</td>
<td style="text-align:left"><a href="https://nicelinks.site/??utm_source=markdown.lovejade.cn">https://nicelinks.site</a></td>
<td style="text-align:center">2017-09-20</td>
</tr>
<tr>
<td style="text-align:left">晚晴幽草轩</td>
<td style="text-align:left"><a href="https://jeffjade.com/??utm_source=markdown.lovejade.cn">https://jeffjade.com</a></td>
<td style="text-align:center">2014-09-20</td>
</tr>
<tr>
<td style="text-align:left">静轩之别苑</td>
<td style="text-align:left"><a href="http://quickapp.lovejade.cn/??utm_source=markdown.lovejade.cn">http://quickapp.lovejade.cn</a></td>
<td style="text-align:center">2019-01-12</td>
</tr>
</tbody>
</table>
<h3 id="9-更详细语法说明">9. 更详细语法说明</h3>
<h3 id="想要查看更详细的语法说明，可以参考这份-Markdown-资源列表，涵盖入门至进阶教程，以及资源、平台等信息，能让您对她有更深的认知。">想要查看更详细的语法说明，可以参考这份 <a href="https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/markdown-tutorial.md">Markdown 资源列表</a>，涵盖入门至进阶教程，以及资源、平台等信息，能让您对她有更深的认知。</h3>
<p>总而言之，不同于其它<em>所见即所得</em>的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 <code>GitHub</code> 和 技术问答网站 <code>StackOverFlow</code> 的御用书写格式，而且越发流行，正在在向各行业渗透。</p>
<p>最新更新于 2019.08.21</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA加密解密 V1.2</title>
    <url>/posts/5/</url>
    <content><![CDATA[<h1 id="rsa-jia-mi-jie-mi-v-1-2">RSA加密解密 V1.2</h1>
<h2 id="V1-2更新日志">V1.2更新日志</h2>
<p>加入了输入数据判断是否为纯数字可以自由选择加密或者解密对文本显示进行了优化</p>
<h2 id="源码">源码</h2>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">加入了输入数据判断是否为纯数字</span></span><br><span class="line"><span class="string">可以自由选择加密或者解密</span></span><br><span class="line"><span class="string">对文本显示进行了优化</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展欧几里的算法</span></span><br><span class="line"><span class="comment"># 计算 ax + by = 1中的x与y的整数解（a与b互质）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ext_gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        x1 = <span class="number">1</span></span><br><span class="line">        y1 = <span class="number">0</span></span><br><span class="line">        x = x1</span><br><span class="line">        y = y1</span><br><span class="line">        r = a</span><br><span class="line">        <span class="keyword">return</span> r, x, y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r, x1, y1 = ext_gcd(b, a % b)</span><br><span class="line">        x = y1</span><br><span class="line">        y = x1 - a // b * y1</span><br><span class="line">        <span class="keyword">return</span> r, x, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超大整数超大次幂然后对超大的整数取模</span></span><br><span class="line"><span class="comment"># (base ^ exponent) mod n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp_mode</span>(<span class="params">base, exp, n</span>):</span><br><span class="line">    exp_array = <span class="built_in">bin</span>(exp)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">    ll = <span class="built_in">len</span>(exp_array)</span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ll):</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'1'</span>==exp_array[i]):</span><br><span class="line">            result = (result * base) % n</span><br><span class="line">        base = (base * base) % n</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> result % n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算公钥和私钥的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>(<span class="params">p, q</span>):</span><br><span class="line">    n = p * q</span><br><span class="line">    fy = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)      <span class="comment"># 计算与n互质的整数个数 欧拉函数</span></span><br><span class="line">    e = <span class="number">65537</span>                    <span class="comment"># 选取e   一般选取65537</span></span><br><span class="line">    <span class="comment"># generate d</span></span><br><span class="line">    a = e</span><br><span class="line">    b = fy</span><br><span class="line">    r, x, y = ext_gcd(a, b)</span><br><span class="line">    <span class="comment"># 计算出的x不能是负数，如果是负数，说明p、q、e选取失败，不过可以把x加上fy，使x为正数，才能计算。</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        x = x + fy</span><br><span class="line">    d = x</span><br><span class="line">    <span class="comment"># 返回：   公钥     私钥</span></span><br><span class="line">    <span class="keyword">return</span>    (n, e), (n, d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数 m是被加密的信息 加密成为c</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m, pubkey</span>):</span><br><span class="line">    n = pubkey[<span class="number">0</span>]</span><br><span class="line">    e = pubkey[<span class="number">1</span>]</span><br><span class="line">	</span><br><span class="line">    time_start_e = time.time()</span><br><span class="line">	</span><br><span class="line">    c = exp_mode(m, e, n)</span><br><span class="line">	</span><br><span class="line">    time_end_e = time.time()</span><br><span class="line">    time_e = time_end_e - time_start_e</span><br><span class="line">    <span class="keyword">return</span> c,time_e</span><br><span class="line"><span class="comment"># 解密函数 c是密文，解密为明文m</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c, selfkey</span>):</span><br><span class="line">    n = selfkey[<span class="number">0</span>]</span><br><span class="line">    d = selfkey[<span class="number">1</span>]</span><br><span class="line">	</span><br><span class="line">    time_start_d = time.time()</span><br><span class="line">	</span><br><span class="line">    m = exp_mode(c, d, n)</span><br><span class="line">	</span><br><span class="line">    time_end_d = time.time()</span><br><span class="line">    time_d = time_end_d - time_start_d</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">return</span> m,time_d</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_str</span>(<span class="params">m</span>):  </span><br><span class="line">    an = re.<span class="keyword">match</span>(<span class="string">'[0-9]+$'</span>, m)  </span><br><span class="line">    <span class="keyword">if</span> an == <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'密码必须是纯数字！'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="string">'''公钥私钥中用到的两个大质数p,q，都是1024位'''</span></span><br><span class="line">        p = <span class="number">106697219132480173106064317148705638676529121742557567770857687729397446898790451577487723991083173010242416863238099716044775658681981821407922722052778958942891831033512463262741053961681512908218003840408526915629689432111480588966800949428079015682624591636010678691927285321708935076221951173426894836169</span></span><br><span class="line">        q = <span class="number">144819424465842307806353672547344125290716753535239658417883828941232509622838692761917211806963011168822281666033695157426515864265527046213326145174398018859056439431422867957079149967592078894410082695714160599647180947207504108618794637872261572262805565517756922288320779308895819726074229154002310375209</span></span><br><span class="line">        <span class="string">'''生成公钥私钥'''</span></span><br><span class="line">        pubkey, selfkey = gen_key(p, q)</span><br><span class="line">        <span class="string">'''需要被加密的信息转化成数字，长度小于秘钥n的长度，如果信息长度大于n的长度，那么分段进行加密，分段解密即可。'''</span></span><br><span class="line">        m = <span class="built_in">input</span>(<span class="string">"请输入你想要处理的数据（必须是纯数字）\n"</span>)</span><br><span class="line">        <span class="keyword">if</span> is_str(m):</span><br><span class="line">            m = <span class="built_in">int</span>(m)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"待处理信息--&gt;"</span>,m,<span class="string">"\n"</span>)</span><br><span class="line">            <span class="string">'''信息加密，m被加密的信息，c是加密后的信息'''</span></span><br><span class="line">            ask = <span class="built_in">input</span>(<span class="string">"请问是要进行加密（输入1）还是解密（输入2）？\n"</span>)</span><br><span class="line">            <span class="keyword">if</span> ask == <span class="string">"1"</span>:</span><br><span class="line">                c,tme = encrypt(m, pubkey)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"被加密后的密文--&gt;"</span>,c,<span class="string">"\n"</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"加密用时"</span>,tme,<span class="string">"s\n"</span>)</span><br><span class="line">                <span class="string">'''信息解密'''</span></span><br><span class="line">            <span class="keyword">elif</span> ask == <span class="string">"2"</span>:</span><br><span class="line">                d,tmd = decrypt(m, selfkey)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"被解密后的明文--&gt;"</span>,d)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"解密用时"</span>,tmd,<span class="string">"s\n"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"请输入“1”（加密）或者“2”（解密）！\n"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA加密解密 初版</title>
    <url>/posts/3/</url>
    <content><![CDATA[<h1 id="rsa-jia-mi-jie-mi-chu-ban">RSA加密解密 初版</h1>
<h2 id="初版">初版</h2>
<h2 id="源码">源码</h2>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">扩展欧几里的算法</span></span><br><span class="line"><span class="string">计算 ax + by = 1中的x与y的整数解（a与b互质）</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ext_gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        x1 = <span class="number">1</span></span><br><span class="line">        y1 = <span class="number">0</span></span><br><span class="line">        x = x1</span><br><span class="line">        y = y1</span><br><span class="line">        r = a</span><br><span class="line">        <span class="keyword">return</span> r, x, y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r, x1, y1 = ext_gcd(b, a % b)</span><br><span class="line">        x = y1</span><br><span class="line">        y = x1 - a // b * y1</span><br><span class="line">        <span class="keyword">return</span> r, x, y</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">超大整数超大次幂然后对超大的整数取模</span></span><br><span class="line"><span class="string">(base ^ exponent) mod n</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp_mode</span>(<span class="params">base, exponent, n</span>):</span><br><span class="line">    bin_array = <span class="built_in">bin</span>(exponent)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">    r = <span class="built_in">len</span>(bin_array)</span><br><span class="line">    base_array = []</span><br><span class="line">    </span><br><span class="line">    pre_base = base</span><br><span class="line">    base_array.append(pre_base)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(r - <span class="number">1</span>):</span><br><span class="line">        next_base = (pre_base * pre_base) % n </span><br><span class="line">        base_array.append(next_base)</span><br><span class="line">        pre_base = next_base</span><br><span class="line">        </span><br><span class="line">    a_w_b = __multi(base_array, bin_array, n)</span><br><span class="line">    <span class="keyword">return</span> a_w_b % n</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__multi</span>(<span class="params">array, bin_array, n</span>):</span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array)):</span><br><span class="line">        a = array[index]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">int</span>(bin_array[index]):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        result *= a</span><br><span class="line">        result = result % n <span class="comment"># 加快连乘的速度</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算公钥和私钥的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>(<span class="params">p, q</span>):</span><br><span class="line">    n = p * q</span><br><span class="line">    fy = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)      <span class="comment"># 计算与n互质的整数个数 欧拉函数</span></span><br><span class="line">    e = <span class="number">65537</span>                    <span class="comment"># 选取e   一般选取65537</span></span><br><span class="line">    <span class="comment"># generate d</span></span><br><span class="line">    a = e</span><br><span class="line">    b = fy</span><br><span class="line">    r, x, y = ext_gcd(a, b)</span><br><span class="line">    <span class="comment"># 计算出的x不能是负数，如果是负数，说明p、q、e选取失败，不过可以把x加上fy，使x为正数，才能计算。</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        x = x + fy</span><br><span class="line">    d = x</span><br><span class="line">    <span class="comment"># 返回：   公钥     私钥</span></span><br><span class="line">    <span class="keyword">return</span>    (n, e), (n, d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数 m是被加密的信息 加密成为c</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m, pubkey</span>):</span><br><span class="line">    n = pubkey[<span class="number">0</span>]</span><br><span class="line">    e = pubkey[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    c = exp_mode(m, e, n)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"><span class="comment"># 解密函数 c是密文，解密为明文m</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c, selfkey</span>):</span><br><span class="line">    n = selfkey[<span class="number">0</span>]</span><br><span class="line">    d = selfkey[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    m = exp_mode(c, d, n)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="string">'''公钥私钥中用到的两个大质数p,q，都是1024位'''</span></span><br><span class="line">    p = <span class="number">106697219132480173106064317148705638676529121742557567770857687729397446898790451577487723991083173010242416863238099716044775658681981821407922722052778958942891831033512463262741053961681512908218003840408526915629689432111480588966800949428079015682624591636010678691927285321708935076221951173426894836169</span></span><br><span class="line">    q = <span class="number">144819424465842307806353672547344125290716753535239658417883828941232509622838692761917211806963011168822281666033695157426515864265527046213326145174398018859056439431422867957079149967592078894410082695714160599647180947207504108618794637872261572262805565517756922288320779308895819726074229154002310375209</span></span><br><span class="line">    <span class="string">'''生成公钥私钥'''</span></span><br><span class="line">    pubkey, selfkey = gen_key(p, q)</span><br><span class="line">    <span class="string">'''需要被加密的信息转化成数字，长度小于秘钥n的长度，如果信息长度大于n的长度，那么分段进行加密，分段解密即可。'''</span></span><br><span class="line">    m = <span class="number">1356205320457610288745198967657644166379972189839804389074591563666634066646564410685955217825048626066190866536592405966964024022236587593447122392540038493893121248948780525117822889230574978651418075403357439692743398250207060920929117606033490559159560987768768324823011579283223392964454439904542675637683985296529882973798752471233683249209762843835985174607047556306705224118165162905676610067022517682197138138621344578050034245933990790845007906416093198845798901781830868021761765904777531676765131379495584915533823288125255520904108500256867069512326595285549579378834222350197662163243932424184772115345</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"待加密信息--&gt;"</span>,m)</span><br><span class="line">    <span class="string">'''信息加密，m被加密的信息，c是加密后的信息'''</span></span><br><span class="line">    c = encrypt(m, pubkey)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"被加密后的密文--&gt;"</span>,c)</span><br><span class="line">    <span class="string">'''信息解密'''</span></span><br><span class="line">    d = decrypt(c, selfkey)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"被解密后的明文--&gt;"</span>,d)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/1/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>RSA加密解密 V1.1</title>
    <url>/posts/4/</url>
    <content><![CDATA[<h1 id="rsa-jia-mi-jie-mi-v-1-1">RSA加密解密 V1.1</h1>
<h2 id="V1-1更新日志">V1.1更新日志</h2>
<p>加入显示加密解密所用时间功能优化整合取模函数exp_mode</p>
<h2 id="源码">源码</h2>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">扩展欧几里的算法</span></span><br><span class="line"><span class="string">计算 ax + by = 1中的x与y的整数解（a与b互质）</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ext_gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        x1 = <span class="number">1</span></span><br><span class="line">        y1 = <span class="number">0</span></span><br><span class="line">        x = x1</span><br><span class="line">        y = y1</span><br><span class="line">        r = a</span><br><span class="line">        <span class="keyword">return</span> r, x, y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r, x1, y1 = ext_gcd(b, a % b)</span><br><span class="line">        x = y1</span><br><span class="line">        y = x1 - a // b * y1</span><br><span class="line">        <span class="keyword">return</span> r, x, y</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">超大整数超大次幂然后对超大的整数取模</span></span><br><span class="line"><span class="string">(base ^ exponent) mod n</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp_mode</span>(<span class="params">base, exp, n</span>):</span><br><span class="line">    exp_array = <span class="built_in">bin</span>(exp)[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">    ll = <span class="built_in">len</span>(exp_array)</span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ll):</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'1'</span>==exp_array[i]):</span><br><span class="line">            result = (result * base) % n</span><br><span class="line">        base = (base * base) % n</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> result % n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算公钥和私钥的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>(<span class="params">p, q</span>):</span><br><span class="line">    n = p * q</span><br><span class="line">    fy = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)      <span class="comment"># 计算与n互质的整数个数 欧拉函数</span></span><br><span class="line">    e = <span class="number">65537</span>                    <span class="comment"># 选取e   一般选取65537</span></span><br><span class="line">    <span class="comment"># generate d</span></span><br><span class="line">    a = e</span><br><span class="line">    b = fy</span><br><span class="line">    r, x, y = ext_gcd(a, b)</span><br><span class="line">    <span class="comment"># 计算出的x不能是负数，如果是负数，说明p、q、e选取失败，不过可以把x加上fy，使x为正数，才能计算。</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        x = x + fy</span><br><span class="line">    d = x</span><br><span class="line">    <span class="comment"># 返回：   公钥     私钥</span></span><br><span class="line">    <span class="keyword">return</span>    (n, e), (n, d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数 m是被加密的信息 加密成为c</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m, pubkey</span>):</span><br><span class="line">    n = pubkey[<span class="number">0</span>]</span><br><span class="line">    e = pubkey[<span class="number">1</span>]</span><br><span class="line">	</span><br><span class="line">    time_start_e = time.time()</span><br><span class="line">	</span><br><span class="line">    c = exp_mode(m, e, n)</span><br><span class="line">	</span><br><span class="line">    time_end_e = time.time()</span><br><span class="line">    time_e = time_end_e - time_start_e</span><br><span class="line">    <span class="keyword">return</span> c,time_e</span><br><span class="line"><span class="comment"># 解密函数 c是密文，解密为明文m</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c, selfkey</span>):</span><br><span class="line">    n = selfkey[<span class="number">0</span>]</span><br><span class="line">    d = selfkey[<span class="number">1</span>]</span><br><span class="line">	</span><br><span class="line">    time_start_d = time.time()</span><br><span class="line">	</span><br><span class="line">    m = exp_mode(c, d, n)</span><br><span class="line">	</span><br><span class="line">    time_end_d = time.time()</span><br><span class="line">    time_d = time_end_d - time_start_d</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">return</span> m,time_d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="string">'''公钥私钥中用到的两个大质数p,q，都是1024位'''</span></span><br><span class="line">    p = <span class="number">106697219132480173106064317148705638676529121742557567770857687729397446898790451577487723991083173010242416863238099716044775658681981821407922722052778958942891831033512463262741053961681512908218003840408526915629689432111480588966800949428079015682624591636010678691927285321708935076221951173426894836169</span></span><br><span class="line">    q = <span class="number">144819424465842307806353672547344125290716753535239658417883828941232509622838692761917211806963011168822281666033695157426515864265527046213326145174398018859056439431422867957079149967592078894410082695714160599647180947207504108618794637872261572262805565517756922288320779308895819726074229154002310375209</span></span><br><span class="line">    <span class="string">'''生成公钥私钥'''</span></span><br><span class="line">    pubkey, selfkey = gen_key(p, q)</span><br><span class="line">    <span class="string">'''需要被加密的信息转化成数字，长度小于秘钥n的长度，如果信息长度大于n的长度，那么分段进行加密，分段解密即可。'''</span></span><br><span class="line">    m = <span class="number">1356205320457610288745198967657644166379972189839804389074591563666634066646564410685955217825048626066190866536592405966964024022236587593447122392540038493893121248948780525117822889230574978651418075403357439692743398250207060920929117606033490559159560987768768324823011579283223392964454439904542675637683985296529882973798752471233683249209762843835985174607047556306705224118165162905676610067022517682197138138621344578050034245933990790845007906416093198845798901781830868021761765904777531676765131379495584915533823288125255520904108500256867069512326595285549579378834222350197662163243932424184772115345</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"待加密信息--&gt;"</span>,m)</span><br><span class="line">    <span class="string">'''信息加密，m被加密的信息，c是加密后的信息'''</span></span><br><span class="line">    c,tme = encrypt(m, pubkey)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"被加密后的密文--&gt;"</span>,c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"加密用时"</span>,tme,<span class="string">"s"</span>)</span><br><span class="line">    <span class="string">'''信息解密'''</span></span><br><span class="line">    d,tmd = decrypt(c, selfkey)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"被解密后的明文--&gt;"</span>,d)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"解密用时"</span>,tmd,<span class="string">"s"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>图形化恩尼格码密码机 初版</title>
    <url>/posts/2/</url>
    <content><![CDATA[<h1 id="tu-xing-hua-en-ni-ge-ma-mi-ma-ji-chu-ban">图形化恩尼格码密码机 初版</h1>
<h2 id="初版">初版</h2>
<h2 id="源码">源码</h2>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此程序需安装easygui库使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> easygui <span class="keyword">as</span> ezgui</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_replace</span>(<span class="params">password, replace_word1, replace_word2, replace_word3</span>):  </span><br><span class="line">    count = <span class="number">0</span>  </span><br><span class="line">    new_pass = <span class="string">''</span>  </span><br><span class="line">    ori_table = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span>  </span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> password:  </span><br><span class="line">        table1 = <span class="built_in">str</span>.maketrans(ori_table, replace_word1)  <span class="comment"># 建立转子1的映射表</span></span><br><span class="line">        table2 = <span class="built_in">str</span>.maketrans(ori_table, replace_word2)  <span class="comment"># 建立转子2的映射表</span></span><br><span class="line">        table3 = <span class="built_in">str</span>.maketrans(ori_table, replace_word3)  <span class="comment"># 建立转子3的映射表</span></span><br><span class="line">        new_obj = <span class="built_in">str</span>.translate(obj, table1)  </span><br><span class="line">        new_obj = <span class="built_in">str</span>.translate(new_obj, table2)  </span><br><span class="line">        new_obj = <span class="built_in">str</span>.translate(new_obj, table3)  </span><br><span class="line">        new_obj = reverse_word(new_obj)  </span><br><span class="line">        reverse_table1 = <span class="built_in">str</span>.maketrans(replace_word1, ori_table)  </span><br><span class="line">        reverse_table2 = <span class="built_in">str</span>.maketrans(replace_word2, ori_table)</span><br><span class="line">        reverse_table3 = <span class="built_in">str</span>.maketrans(replace_word3, ori_table)</span><br><span class="line">        new_obj = <span class="built_in">str</span>.translate(new_obj, reverse_table3)  </span><br><span class="line">        new_obj = <span class="built_in">str</span>.translate(new_obj, reverse_table2)  </span><br><span class="line">        new_obj = <span class="built_in">str</span>.translate(new_obj, reverse_table1)  </span><br><span class="line">        new_pass += new_obj  </span><br><span class="line">        replace_word1 = rotors(replace_word1)  </span><br><span class="line">        count += <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">if</span> count % <span class="number">676</span> == <span class="number">0</span>:   </span><br><span class="line">            replace_word3 = rotors(replace_word3)</span><br><span class="line">        <span class="keyword">elif</span> count % <span class="number">26</span> == <span class="number">0</span>:  </span><br><span class="line">            replace_word2 = rotors(replace_word2)</span><br><span class="line">    <span class="keyword">return</span> new_pass  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_str</span>(<span class="params">password, replace_word1, replace_word2, replace_word3</span>):  </span><br><span class="line">    an = re.<span class="keyword">match</span>(<span class="string">'[a-z]+$'</span>, password)  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">type</span>(password) == <span class="built_in">type</span>(replace_word1) == <span class="built_in">type</span>(replace_word2) == <span class="built_in">type</span>(replace_word3) == <span class="built_in">type</span>(<span class="string">'a'</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'密码必须是字符串！'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> an:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'字符串只能包含小写字母！'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> <span class="built_in">len</span>(replace_word1) == <span class="built_in">len</span>(replace_word2) == <span class="built_in">len</span>(replace_word3) == <span class="number">26</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'替换码必须为26个字母！'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotors</span>(<span class="params">replace_word</span>):  </span><br><span class="line">    <span class="keyword">return</span> replace_word[<span class="number">1</span>:] + replace_word[<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 自反器很好设置的，只要设置一个字典，保证所有字母（26个）两两对应就可以了</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_word</span>(<span class="params">word</span>):</span><br><span class="line">    dic = {<span class="string">'a'</span>: <span class="string">'n'</span>, <span class="string">'b'</span>: <span class="string">'o'</span>, <span class="string">'c'</span>: <span class="string">'p'</span>, <span class="string">'d'</span>: <span class="string">'q'</span>,</span><br><span class="line">           <span class="string">'e'</span>: <span class="string">'r'</span>, <span class="string">'f'</span>: <span class="string">'s'</span>, <span class="string">'g'</span>: <span class="string">'t'</span>, <span class="string">'h'</span>: <span class="string">'u'</span>,</span><br><span class="line">           <span class="string">'i'</span>: <span class="string">'v'</span>, <span class="string">'j'</span>: <span class="string">'w'</span>, <span class="string">'k'</span>: <span class="string">'x'</span>, <span class="string">'l'</span>: <span class="string">'y'</span>,</span><br><span class="line">           <span class="string">'m'</span>: <span class="string">'z'</span>, <span class="string">'n'</span>: <span class="string">'a'</span>, <span class="string">'o'</span>: <span class="string">'b'</span>, <span class="string">'p'</span>: <span class="string">'c'</span>,</span><br><span class="line">           <span class="string">'q'</span>: <span class="string">'d'</span>, <span class="string">'r'</span>: <span class="string">'e'</span>, <span class="string">'s'</span>: <span class="string">'f'</span>, <span class="string">'t'</span>: <span class="string">'g'</span>,</span><br><span class="line">           <span class="string">'u'</span>: <span class="string">'h'</span>, <span class="string">'v'</span>: <span class="string">'i'</span>, <span class="string">'w'</span>: <span class="string">'j'</span>, <span class="string">'x'</span>: <span class="string">'k'</span>,</span><br><span class="line">           <span class="string">'y'</span>: <span class="string">'l'</span>, <span class="string">'z'</span>: <span class="string">'m'</span>}</span><br><span class="line">    <span class="keyword">return</span> dic[word]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    title = <span class="string">'by 石光k一5'</span></span><br><span class="line">    ezgui.msgbox(<span class="string">'这是恩尼格码密码机'</span>,title)</span><br><span class="line">    a_password = ezgui.enterbox(<span class="string">'请输入明文加密或密文解密:'</span>,title)</span><br><span class="line">    r_password1 = <span class="string">'qwertyuiopasdfghjklzxcvbnm'</span>  <span class="comment"># 转子1，自己设置即可</span></span><br><span class="line">    r_password2 = <span class="string">'asdfqwerzxcvtyuiopghjklbnm'</span>  <span class="comment"># 转子2，自己设置即可</span></span><br><span class="line">    r_password3 = <span class="string">'poiuytrewqasdfghjklmnbvcxz'</span>  <span class="comment"># 转子3，自己设置即可</span></span><br><span class="line">    <span class="keyword">if</span> is_str(a_password, r_password1, r_password2, r_password3):</span><br><span class="line">        msg=<span class="string">f'密文/明文如下:<span class="subst">{simple_replace(a_password, r_password1, r_password2, r_password3)}</span>'</span></span><br><span class="line">        ezgui.textbox(msg,title)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>密码学</tag>
      </tags>
  </entry>
</search>
